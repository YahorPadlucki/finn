{"version":3,"sources":["components/BalanceHeader.js","components/context/AppContext.js","components/utils/DateSelector.js","components/api/types.js","components/infoBlocks/Expenses.js","components/NavigationBar.js","components/infoBlocks/BalanceBlock.js","components/infoBlocks/Balance.js","components/popup/Modal.js","components/infoBlocks/InputDataForm.js","components/infoBlocks/EditTransactionPopup.js","components/context/ApiContext.js","components/infoBlocks/DeletePopup.js","components/infoBlocks/History.js","components/infoBlocks/AddTransaction.js","components/api/serverApi.js","components/infoBlocks/EditFieldNamePopup.js","components/infoBlocks/Settings.js","components/App.js","index.js"],"names":["BalanceHeader","props","className","style","border","accountName","balance","defaultProps","AppContext","createContext","accounts","latestTransactions","historyTransactions","categories","incomeCategories","isLoaded","allTransactionsLoaded","isAllTransactionsLoaded","loadMoreTransactions","fetchHistoryTransactions","year","month","edit","nameId","newName","oldName","addAccount","name","addCategory","DateSelector","useState","selectedDate","setSelectedDate","useEffect","date","Date","getFullYear","getMonth","onSelectedDateChanged","value","onChange","e","target","SPEND_TYPE","Expenses","useContext","getNameFromNameId","total","setTotal","canvasRef","useRef","length","reduce","transaction","spendAmount","type","getTransactionColorCode","filter","category","categoryNameId","color","textAlign","combinedCategories","forEach","cobinedCategorie","tr","push","canvas","current","ctx","getContext","labels","data","colors","Chart","datasets","backgroundColor","drawChart","map","index","toFixed","renderTable","ref","NavigationBar","buttons","getButtonStyle","buttonType","buttonIndex","selectedButtonIndex","onButtonClicked","selectedIndex","button","i","key","onMouseDown","BalanceBlock","acc","Balance","padding","Modal","ReactDOM","createPortal","onClick","onDismiss","stopPropagation","title","content","actions","document","querySelector","InputDataForm","isInputValid","setIsInputValid","setDate","amount","setAmount","description","setDescription","selectedTransactionFormId","setSelectedTransactionFormId","selectedAccountFromNameId","setSelectedAccountFromNameId","selectedAccountToNameId","setSelectedAccountToNameId","selectedCategoryNameId","setSelectedCategoryNameId","selectedIncomeCategoryNameId","setSelectedIncomeCategoryNameId","transactionType","renderAmountInputField","renderCategory","renderOptionsList","onCategoryChangedInternal","renderIncomeCategory","renderFromAccount","account","accountNameId","onAccountChanged","onAccountFromChangedInternal","renderToAccount","onAccountToChanged","optionsArray","setStateFunction","selectedElement","parseInt","option","isInputFieldDisabled","isErrorInInputField","input","onKeyPress","placeholder","isNaN","onSaveClicked","a","async","getTransactionType","transactionData","Number","getSelectedCategoryNameId","getDate","id","onSaveClickedCallBack","formStateClassName","getMenuItemClass","onMenuItemClicked","isEditPopup","renderToggleBar","onSubmit","preventDefault","getAccountTitle","getCategoryTitle","getRenderCategory","selected","onCancel","renderCancelButton","EditTransactionPopup","transactionToEdit","toAccountNameId","OnCancel","ApiContext","editTransaction","removeTransaction","addTransaction","addIncomeTransaction","addTransferTransaction","removeAccount","accountId","DeletePopup","itemName","OnDelete","History","isEditPopupActive","setEditPopupActive","isDeletePopupActive","setDeletePopupActive","setTransactionToEdit","itemsToShow","setItemsToShow","transactions","setTransactions","isHistoryTab","showMoreClicked","newItemsToShowAmount","console","log","hideEditPopup","hideDeletePopup","dimmerStyle","renderDateSelection","slice","verticalAlign","dateStr","formatDate","renderShowMoreButton","renderEditPopup","renderDeletePopup","AddTransaction","isTransactionInProcess","setIsTransactionInProcess","transactionStatusMessage","setTransactionStatusMessage","selectedAccountNameId","postResponse","url","fetchData","dataUrl","fetch","catch","response","json","postTransaction","postRequest","addNewName","addNewAccount","addNewCategory","method","headers","body","JSON","stringify","then","patchTransaction","patchRequest","patchAccounts","patchName","patchColor","deleteTransaction","deleteRequest","deleteAccount","EditFieldNamePopup","fieldToEdit","setName","setColor","renderColorPicker","onChangeComplete","handleChangeComplete","hex","Settings","popupType","setPopupType","setFieldToEdit","namePopupTitle","setNamePopupTitle","fieldToEditTypeName","setColorForEditPopup","renderElements","elemets","typeName","deleteFunction","el","App","setAccounts","names","setNames","setCategories","setIncomeCategories","setLatestTransactions","setHistoryTransactions","selectedAccount","setSelectedAccount","selectedInfoBlock","setSelectedInfoBlock","setIsLoaded","loadTransactionsLimit","setLoadTransactionsLimit","setIsAllTransactionsLoaded","fetchInitData","fetchNames","fetchAccounts","fetchCategories","fetchLatestTransactions","newTransactions","find","editTransferTransaction","oldData","newData","oldFromAcc","oldToAcc","newFromAcc","newToAcc","deltaAmount","saveNewName","newNameId","sort","b","newNameData","Provider","sign","oldAcc","newAcc","toAcc","fromAcc","updatedNames","newAccData","categoryName","newCategoryData","marginTop","renderInfoBlock","render","getElementById"],"mappings":"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","file":"static/js/main.5f5d04a5.chunk.js","sourcesContent":["import React from 'react';\n\nconst BalanceHeader = (props) => {\n    return (\n        <div className=\"ui center aligned container\"\n             style={{border: '1px solid rgba(34,36,38,.15)'}}>\n            <div>{props.accountName} Balance:</div>\n            <div>{props.balance}</div>\n        </div>\n    );\n};\n\nBalanceHeader.defaultProps = {\n    accountName: '',\n    balance: 0\n};\n\nexport default BalanceHeader;","import React, {createContext} from 'react'\n\nconst AppContext = createContext({\n    accounts: ['1', '2'],\n    latestTransactions: [\"1\", \"1\"],\n    historyTransactions: [],\n    categories: [\"Food\"],\n    incomeCategories: [\"Salary\"],\n    isLoaded: false,\n\n    allTransactionsLoaded: false,\n    isAllTransactionsLoaded: false,\n    loadMoreTransactions: () => {\n    },\n    fetchHistoryTransactions: (year, month) => {\n    },\n    edit: (nameId, newName, oldName) => {\n    },\n    addAccount: (name) => {\n\n    },\n    addCategory: (name) => {\n\n    }\n});\n\nexport default AppContext","import React, {useEffect, useState} from 'react';\n\n\nconst DateSelector = (props) => {\n\n    const [selectedDate, setSelectedDate] = useState({});\n\n    useEffect(() => {\n        const date = new Date();\n        const year = date.getFullYear();\n        const month = date.getMonth();\n\n        setSelectedDate({month, year});\n    }, []);\n\n    useEffect(() => {\n        if (selectedDate.month && selectedDate.year)\n            props.onSelectedDateChanged(selectedDate.month, selectedDate.year);\n    }, [selectedDate]);\n\n\n    const setSelectedMonth = (month) => {\n        setSelectedDate({month, year: selectedDate.year});\n    };\n\n    const setSelectedYear = (year) => {\n        setSelectedDate({month: selectedDate.month, year});\n    };\n\n    return (\n        <div>\n            <select className=\"ui search dropdown\"\n                    value={selectedDate.month}\n                    onChange={e => setSelectedMonth(e.target.value)}>\n                <option value=\"0\">Jan</option>\n                <option value=\"1\">Feb</option>\n                <option value=\"2\">Mar</option>\n                <option value=\"3\">Apr</option>\n                <option value=\"4\">May</option>\n                <option value=\"5\">Jun</option>\n                <option value=\"6\">Jul</option>\n                <option value=\"7\">Aug</option>\n                <option value=\"8\">Sep</option>\n                <option value=\"9\">Oct</option>\n                <option value=\"10\">Nov</option>\n                <option value=\"11\">Dec</option>\n            </select>\n            <select className=\"ui search dropdown\"\n                    value={selectedDate.year}\n                    onChange={e => setSelectedYear(e.target.value)}>\n                <option value=\"2020\">2020</option>\n                <option value=\"2019\">2019</option>\n            </select>\n        </div>\n    )\n\n\n};\n\nexport default DateSelector","export const NAMES = 'namesArray';\nexport const ACCOUNTS = 'accounts';\nexport const CATEGORIES = 'categories';\nexport const INCOME_CATEGORIES = 'incomeCategories';\nexport const TRANSACTIONS = 'transactions';\nexport const SPEND_TYPE = 'transactionType';\nexport const INCOME_TYPE = 'incomeType';\nexport const TRANSFER_TYPE = 'transferType';\n","import React, {useContext, useEffect, useRef, useState} from 'react';\nimport AppContext from \"../context/AppContext\";\nimport DateSelector from \"../utils/DateSelector\";\nimport {SPEND_TYPE} from \"../api/types\";\nimport Chart from \"chart.js\"\n\n\nconst Expenses = () => {\n\n    const {\n        categories,\n        historyTransactions,\n        getNameFromNameId,\n        fetchHistoryTransactions\n    } = useContext(AppContext);\n\n    const [selectedDate] = useState({month: 1, year: 2020});\n    const [total, setTotal] = useState(0);\n\n    const canvasRef = useRef(null);\n\n\n    useEffect(() => {\n        fetchHistoryTransactions(selectedDate.year, selectedDate.month);\n    }, [selectedDate]);\n\n\n    useEffect(() => {\n\n        if (historyTransactions.length) {\n            const total = historyTransactions.reduce((total, transaction) => {\n                let spendAmount = 0;\n                if (transaction.type === SPEND_TYPE)\n                    spendAmount = transaction.total;\n\n                return total + spendAmount;\n            }, 0);\n            setTotal(total);\n        }\n\n\n    }, [historyTransactions]);\n\n    const getTransactionColorCode = (transaction) => {\n        return categories.filter((category) => category.nameId === transaction.categoryNameId)[0].color\n    };\n\n    const renderTable = () => {\n\n        if (!categories || !categories.length) {\n            return \"\";\n        }\n        const combinedCategories = [];\n\n        historyTransactions.forEach(transaction => {\n\n            if (transaction.type === SPEND_TYPE) {\n                if (!combinedCategories.length) {\n                    combinedCategories.push({...transaction});\n                } else {\n\n                    const cobinedCategorie = combinedCategories.filter(tr => tr.categoryNameId === transaction.categoryNameId)[0];\n                    if (!cobinedCategorie)\n                        combinedCategories.push({...transaction});\n                    else\n                        cobinedCategorie.total += transaction.total;\n                }\n            }\n\n        });\n\n        drawChart(combinedCategories);\n\n\n        return combinedCategories.map((transaction, index) => {\n            return (\n                <tr>\n\n                    <td style={{'background-color': getTransactionColorCode(transaction)}}/>\n                    <td>{getNameFromNameId(transaction.categoryNameId)}</td>\n                    <td>{((transaction.total / total) * 100).toFixed(1) + \"%\"}</td>\n                    <td>{transaction.total}</td>\n                </tr>\n            );\n        });\n    };\n\n\n    function drawChart(combinedCategories) {\n        const canvas = canvasRef.current;\n        if (!canvas) return; // Todo\n        const ctx = canvas.getContext('2d');\n\n        const labels = [];\n        const data = [];\n        const colors = [];\n\n        combinedCategories.forEach(transaction => {\n            labels.push(getNameFromNameId(transaction.categoryNameId));\n            data.push(transaction.total);\n            colors.push(getTransactionColorCode(transaction))\n        });\n\n\n        new Chart(ctx, {\n            type: 'pie',\n            data: {\n                labels: labels,\n                datasets: [{\n                    backgroundColor: colors,\n                    data: data\n                }]\n            }\n        });\n    }\n\n    return (\n        <div className=\"ui segment\"\n             style={{border: '1px solid rgba(34,36,38,.15)'}}>\n            <DateSelector\n                onSelectedDateChanged={fetchHistoryTransactions}/>\n            <h4 style={{textAlign: 'right'}}>Expenses total: {total}</h4>\n\n            <table className=\"ui celled table unstackable\">\n                <thead>\n                <tr>\n                    <th className=\"two wide\">Color</th>\n                    <th className=\"ten wide\">Category</th>\n                    <th className=\"two wide\">Percent</th>\n                    <th className=\"two wide\">Total</th>\n                </tr>\n                </thead>\n                <tbody>\n                {renderTable()}\n                </tbody>\n            </table>\n\n            <canvas\n                ref={canvasRef}\n            />\n\n        </div>\n\n    );\n};\n\nexport default Expenses;","import React from 'react';\n\nconst NavigationBar = (props) => {\n    const INFO_BLOCK_TYPE = \"infoBlock\";\n    const ADD_TRANSACTION_TYPE = \"addTransaction\";\n    const buttons = [\n        {name: \"Balance\", type: INFO_BLOCK_TYPE},\n        {name: \"Expenses\", type: INFO_BLOCK_TYPE},\n        {name: \"+\", type: ADD_TRANSACTION_TYPE},\n        {name: \"History\", type: INFO_BLOCK_TYPE},\n        {name: \"Settings\", type: INFO_BLOCK_TYPE}\n    ];\n\n    const renderButtons = () => {\n        return buttons.map((button, i) => {\n            return <button key={i} className={getButtonStyle(button.type, i)}\n                           onMouseDown={(e) => onButtonClicked(e, button.type, i)}>{button.name}</button>;\n        });\n\n    };\n\n    const getButtonStyle = (buttonType, buttonIndex) => {\n        //\n        // if (buttonType === ADD_TRANSACTION_TYPE) {\n        //     return \"big ui primary button \"\n        // }\n        return props.selectedButtonIndex === buttonIndex ? \"ui active button\" : \"ui button\"\n    };\n\n    const onButtonClicked = (e, buttonType, selectedIndex) => {\n\n        // if (buttonType === ADD_TRANSACTION_TYPE) {\n        //     e.preventDefault();\n        //     return;\n        // }\n\n        props.onButtonClicked(selectedIndex);\n    };\n\n    return (\n        <div className=\"ui container\"\n             style={{border: '1px solid rgba(34,36,38,.15)', textAlign: 'center'}}>\n            <div className=\"ui five buttons\">\n                {renderButtons()}\n            </div>\n        </div>\n    );\n};\n\n\nexport default NavigationBar;","import React, {useContext} from 'react';\nimport AppContext from \"../context/AppContext\";\n\nconst BalanceBlock = () => {\n    const {\n        accounts,\n        getNameFromNameId\n    } = useContext(AppContext);\n\n    const renderAccounts = () => accounts.map((acc, i) => <p\n        key={i}>{getNameFromNameId(acc.nameId)}: {acc.balance}</p>);\n\n    return (\n        <div className=\"ui segment\">\n            <h3 className=\"header\">Balance</h3>\n            {renderAccounts()}\n        </div>\n    );\n\n\n};\n\nexport default BalanceBlock;","import React from 'react';\nimport BalanceBlock from \"./BalanceBlock\";\n\nconst Balance = () => {\n\n    return (\n        <div className=\"ui container\"\n             style={{border: '1px solid rgba(34,36,38,.15)'}}>\n            <div className=\"ui centered grid\" style={{padding: '10px'}}>\n                <div className=\"four wide column\">\n                    <BalanceBlock/>\n                </div>\n            </div>\n        </div>\n    )\n};\n\nexport default Balance;","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './Modal.css'\n\n\nconst Modal = props => {\n\n    return ReactDOM.createPortal(\n        <div className='ui dimmer modals page transition visible active' onClick={props.onDismiss}>\n            <div onClick={(e) => e.stopPropagation()}\n                 className='ui standard test modal  active'>\n                <div className='header'>{props.title}</div>\n                <div className='content'>{props.content}</div>\n                <div className='actions'>\n                    {props.actions}\n                </div>\n            </div>\n        </div>,\n        document.querySelector('.modal')\n    );\n\n\n};\n\nexport default Modal","import React, {useContext, useEffect, useState} from 'react';\nimport AppContext from \"../context/AppContext\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport {INCOME_TYPE, SPEND_TYPE, TRANSFER_TYPE} from \"../api/types\";\n\nconst InputDataForm = (props) => {\n\n    const {\n        accounts, categories, incomeCategories,\n        getNameFromNameId\n    } = useContext(AppContext);\n\n    const [isInputValid, setIsInputValid] = useState(true);\n    const [date, setDate] = useState(props.date);\n    const [amount, setAmount] = useState('');\n    const [description, setDescription] = useState('');\n    const [selectedTransactionFormId, setSelectedTransactionFormId] = useState(0);\n\n\n    //TODO: Change to ids\n    const [selectedAccountFromNameId, setSelectedAccountFromNameId] = useState(props.selectedAccountFromNameId);\n    const [selectedAccountToNameId, setSelectedAccountToNameId] = useState(props.selectedAccountToNameId);\n\n    const [selectedCategoryNameId, setSelectedCategoryNameId] = useState(props.selectedCategoryNameId);\n    const [selectedIncomeCategoryNameId, setSelectedIncomeCategoryNameId] = useState(props.selectedIncomeCategoryNameId);\n\n    let amountInput;\n\n\n    useEffect(() => {\n        // component did mount\n        if (props.amount) {\n            setAmount(props.amount);\n\n        } else {\n            //TODO:\n            // amountInput.focus();\n        }\n\n\n        if (props.description) {\n            setDescription(props.description);\n        }\n\n        if (props.transactionType) {\n            if (props.transactionType === SPEND_TYPE) {\n                setSelectedTransactionFormId(0)\n            }\n            if (props.transactionType === TRANSFER_TYPE) {\n                setSelectedTransactionFormId(1)\n            }\n            if (props.transactionType === INCOME_TYPE) {\n                setSelectedTransactionFormId(2)\n            }\n        }\n\n        if (!date) {\n            setDate(new Date());\n        }\n\n    }, []);\n\n\n    useEffect(() => {\n        renderAmountInputField();\n    }, [selectedAccountFromNameId, selectedAccountToNameId]);\n\n    useEffect(() => {\n        if (accounts[0]) {\n            if (!props.selectedAccountToNameId)\n                setSelectedAccountToNameId(accounts[0].nameId);\n\n            if (!props.selectedAccountFromNameId)\n                setSelectedAccountFromNameId(accounts[0].nameId);\n        }\n    }, [accounts]);\n\n\n    const onCategoryChangedInternal = (categoryNameId) => {\n        setSelectedCategoryNameId(categoryNameId);\n    };\n\n    const onIncomeCategoryChangedInternal = (categoryNameID) => {\n        setSelectedIncomeCategoryNameId(categoryNameID);\n    };\n\n    const onAccountFromChangedInternal = (accountNameId) => {\n        setSelectedAccountFromNameId(accountNameId);\n\n        if (props.onAccountChanged)\n            props.onAccountChanged(accountNameId);\n    };\n\n    const onAccountToChanged = (accountNameId) => {\n        setSelectedAccountToNameId(accountNameId);\n\n    };\n\n    const renderCategory = () => renderOptionsList(categories.map(category => category.nameId), (categoryNameId) => onCategoryChangedInternal(categoryNameId), selectedCategoryNameId);\n    const renderIncomeCategory = () => renderOptionsList(incomeCategories.map(category => category.nameId), (categoryNameId) => onIncomeCategoryChangedInternal(categoryNameId), selectedIncomeCategoryNameId);\n\n    const renderFromAccount = () => renderOptionsList(accounts.map(account => account.nameId), (accountNameId) => onAccountFromChangedInternal(accountNameId), selectedAccountFromNameId);\n    const renderToAccount = () => renderOptionsList(accounts.map(account => account.nameId), (accountNameId) => onAccountToChanged(accountNameId), selectedAccountToNameId);\n\n\n    const renderOptionsList = function (optionsArray, setStateFunction, selectedElement) {\n        return (\n            <select className=\"ui search dropdown\" value={selectedElement}\n                    onChange={e => setStateFunction(parseInt(e.target.value))}>\n                {\n                    optionsArray.map((option, i) => {\n                        return <option key={i} value={option}>{getNameFromNameId(option)}</option>\n                    })\n                }\n            </select>\n        );\n    };\n\n    const renderCalendar = function () {\n        return (\n            <DatePicker selected={date}\n                        onChange={(date) => setDate(date)}/>\n        );\n    };\n\n    const clearFields = () => {\n        setAmount('');\n        setDescription('');\n    };\n\n    const isInputFieldDisabled = () => selectedTransactionFormId === 1 && selectedAccountToNameId === selectedAccountFromNameId;\n\n    const getInputFieldClassName = () => {\n        return `field ${isInputValid ? '' : 'error'} ${isInputFieldDisabled() ? `disabled` : ``}`;\n\n    };\n\n    const renderAmountInputField = function () {\n        if (!isErrorInInputField()) {\n            if (!isInputValid)\n                setIsInputValid(true);\n        }\n        return (\n            <div className={getInputFieldClassName()}>\n                <input type=\"text\"\n                       style={{}}\n                       ref={(input) => {\n                           amountInput = input;\n                       }}\n                       value={amount}\n                       onChange={e => setAmount(e.target.value)}\n                       onKeyPress={onKeyPress}\n                       placeholder=\"Amount\"/>\n            </div>\n        );\n    };\n\n    const renderNoteField = function () {\n        return (\n            <div className=\"field\">\n                <input type=\"text\"\n                       value={description}\n                       onChange={e => setDescription(e.target.value)}\n                       onKeyPress={onKeyPress}\n                       placeholder=\"Note\"/>\n            </div>\n        );\n    };\n\n    const isErrorInInputField = () => {\n        return amount.length === 0 || isNaN(amount) || amount <= 0 || isInputFieldDisabled();\n    };\n\n    const onSaveClicked = async () => {\n        if (isErrorInInputField() || isInputFieldDisabled()) {\n            setIsInputValid(false);\n        } else {\n            if (!isInputValid)\n                setIsInputValid(true);\n\n            const transactionType = getTransactionType();\n\n            const transactionData = {\n                \"total\": Number(amount),\n                \"accountNameId\": selectedAccountFromNameId ? selectedAccountFromNameId : props.selectedAccountFromNameId,\n                \"toAccountNameId\": selectedAccountToNameId,\n                \"categoryNameId\": getSelectedCategoryNameId(),\n                \"date\": date,\n                \"year\": date.getFullYear(),\n                \"month\": date.getMonth(),\n                \"day\": date.getDate(),\n                \"description\": description,\n                \"type\": transactionType\n            };\n\n            if (props.id) {\n                transactionData.id = props.id;\n            }\n\n            props.onSaveClickedCallBack(transactionData, transactionType);\n\n            clearFields();\n            // const postResponse = await postTransaction();\n\n\n        }\n    };\n\n    const getTransactionType = () => {\n        switch (selectedTransactionFormId) {\n            case 0:\n                return SPEND_TYPE;\n            case 1:\n                return TRANSFER_TYPE;\n            case 2:\n                return INCOME_TYPE;\n        }\n    };\n\n    const getSelectedCategoryNameId = () => {\n        switch (selectedTransactionFormId) {\n            case 0:\n                return selectedCategoryNameId ? selectedCategoryNameId : props.selectedCategoryNameId;\n            case 2:\n                return selectedIncomeCategoryNameId ? selectedIncomeCategoryNameId : props.selectedIncomeCategoryNameId;\n        }\n\n    };\n\n    const onKeyPress = (e) => {\n        if (e.key === 'Enter') {\n            onSaveClicked();\n        }\n\n    };\n    const renderCancelButton = () => {\n        if (props.onCancel)\n            return <button className='big ui button' onClick={() => props.onCancel()}>Cancel</button>;\n    };\n    const formStateClassName = `ui form ${!props.isLoaded ? 'loading' : ''}`;\n\n    const getAccountTitle = () => {\n        switch (selectedTransactionFormId) {\n            case 0:\n                return \"Account\";\n            case  1:\n                return \"From Account\";\n            case 2:\n                return \"To Account\";\n        }\n    };\n\n\n    const getCategoryTitle = () => {\n        switch (selectedTransactionFormId) {\n            case 0:\n                return \"Category\";\n            case  1:\n                return \"To Account\";\n            case 2:\n                return \"From\";\n        }\n    };\n\n    const getRenderCategory = () => {\n        switch (selectedTransactionFormId) {\n            case 0:\n                return renderCategory();\n            case  1:\n                return renderToAccount();\n            case 2:\n                return renderIncomeCategory();\n        }\n    };\n\n\n    const renderForm = () => {\n        return (\n            <form className={formStateClassName} onSubmit={e => e.preventDefault()}>\n                <div className=\"field\">\n                    <label>{getAccountTitle()}</label>\n                    <div className=\"fields\">\n                        <div className=\"nine wide field\">{renderFromAccount()}</div>\n                        <div className=\"seven wide field\">{renderAmountInputField()}</div>\n                    </div>\n                </div>\n                <div className=\"field\">\n                    <label>{getCategoryTitle()}</label>\n                    <div className=\"fields\">\n                        <div className=\"nine wide field\">{getRenderCategory()}</div>\n                        <div className=\"seven wide field\">{renderCalendar()}</div>\n                    </div>\n                </div>\n                {renderNoteField()}\n                <div style={{textAlign: 'right'}}>\n                    <button className=\"big ui primary button \"\n                            onClick={onSaveClicked}>\n                        Save\n                    </button>\n                    {renderCancelButton()}\n                </div>\n\n            </form>\n        );\n    };\n\n\n    const getMenuItemClass = (id) => `item ${id === selectedTransactionFormId ? 'active' : ''}`;\n    const onMenuItemClicked = (id) => setSelectedTransactionFormId(id);\n\n    let renderToggleBar = function () {\n        if (!props.isEditPopup) {\n            return (\n                <div className=\"ui three item menu\">\n                    <a className={getMenuItemClass(0)} onClick={() => onMenuItemClicked(0)}>Expense</a>\n                    <a className={getMenuItemClass(1)} onClick={() => onMenuItemClicked(1)}>Transfer</a>\n                    <a className={getMenuItemClass(2)} onClick={() => onMenuItemClicked(2)}>Income</a>\n                </div>\n            )\n        }\n\n\n    };\n    return (\n        <div className=\"eight wide column\">\n            {renderToggleBar()}\n            {renderForm()}\n        </div>\n    );\n};\n\nexport default InputDataForm;","import React from 'react';\nimport Modal from \"../popup/Modal\";\nimport InputDataForm from \"./InputDataForm\";\n\nconst EditTransactionPopup = (props) => {\n\n\n    const renderContent = () => {\n        return (\n            <InputDataForm isLoaded={props.isLoaded}\n                           isEditPopup={true}\n                           date={new Date(props.transactionToEdit.date)}\n                           description={props.transactionToEdit.description}\n                           amount={props.transactionToEdit.total}\n                           id={props.transactionToEdit.id}\n                           selectedAccountFromNameId={props.transactionToEdit.accountNameId}\n                           selectedAccountToNameId={props.transactionToEdit.toAccountNameId}\n                           selectedCategoryNameId={props.transactionToEdit.categoryNameId}\n                           transactionType={props.transactionToEdit.type}\n                           onSaveClickedCallBack={props.onSaveClickedCallBack}\n                           onCancel={props.OnCancel}\n\n            />)\n\n    };\n\n    return (\n        <Modal\n            title=\"Edit transaction\"\n            content={renderContent()}\n            onDismiss={() => props.OnCancel()}\n        />\n    );\n\n};\n\nexport default EditTransactionPopup;\n","import React, {createContext} from 'react'\n\nconst ApiContext = createContext({\n    editTransaction: (transactionData) => {\n    },\n    removeTransaction: (transactionData) => {\n    },\n    addTransaction: (transactionData) => {\n    },\n    addIncomeTransaction: (transactionData) => {\n    },\n    addTransferTransaction: (transactionData) => {\n    },\n    getNameFromNameId: (nameId) => {\n    },\n    removeAccount: (accountId) => {\n    }\n\n});\n\nexport default ApiContext","import React from 'react';\nimport Modal from \"../popup/Modal\";\n\nconst DeletePopup = (props) => {\n\n    const renderContent = () => {\n        return `Are you sure you want to delete this ${props.itemName}?`\n\n    };\n\n    const renderActions = () => {\n\n        return (\n            <div style={{textAlign: 'right'}}>\n                <button className='ui button red ' onClick={\n                    () => {\n                        props.OnDelete();\n                    }\n                }>Delete\n                </button>\n                <button className='ui button' onClick={props.OnCancel}>Cancel</button>\n            </div>\n\n\n        );\n\n    };\n\n    const onCancel = () => {\n        props.OnCancel();\n    };\n\n    return (\n        <Modal\n            title={`Delete ${props.itemName}`}\n            content={renderContent()}\n            actions={renderActions()}\n            onDismiss={onCancel}\n        />\n    );\n\n};\n\nexport default DeletePopup;\n","import React, {useContext, useEffect, useState} from 'react';\nimport EditTransactionPopup from \"./EditTransactionPopup\";\nimport ApiContext from \"../context/ApiContext\";\nimport DeletePopup from \"./DeletePopup\";\nimport AppContext from \"../context/AppContext\";\nimport DateSelector from \"../utils/DateSelector\";\nimport {INCOME_TYPE, SPEND_TYPE, TRANSFER_TYPE} from \"../api/types\";\n\nconst History = (props) => {\n\n    const {\n        latestTransactions,\n        historyTransactions,\n        isLoaded,\n        loadMoreTransactions,\n        isAllTransactionsLoaded,\n        fetchHistoryTransactions,\n        getNameFromNameId\n    } = useContext(AppContext);\n    const {editTransaction, removeTransaction} = useContext(ApiContext);\n    const [isEditPopupActive, setEditPopupActive] = useState(false);\n    const [isDeletePopupActive, setDeletePopupActive] = useState(false);\n    const [transactionToEdit, setTransactionToEdit] = useState({});\n\n    const [itemsToShow, setItemsToShow] = useState(props.itemsToShow);\n    const [transactions, setTransactions] = useState([]);\n\n\n    const formatDate = (dateStr) => {\n        const date = new Date(dateStr)\n        return `${date.getDate()}.${date.getMonth() + 1}`;\n    };\n\n    useEffect(() => {\n        // component did mount\n        setItemsToShow(props.itemsToShow)\n\n    }, []);\n\n    useEffect(() => {\n        if (props.isHistoryTab) {\n            setTransactions(historyTransactions);\n            setItemsToShow(historyTransactions.length);\n        } else {\n\n            setTransactions(latestTransactions);\n            // setItemsToShow()\n        }\n\n    }, [latestTransactions, historyTransactions]);\n\n\n    const renderTransactions = () => {\n        if (!transactions) return <div>Loading</div>;\n\n        return transactions.slice(0, itemsToShow).map((transaction, index) => {\n            const getTransactionDirection = function () {\n                if (transaction.type === INCOME_TYPE) {\n                    return \"<-\";\n                }\n                return \"->\";\n            };\n\n            const getTransactionColor = function () {\n                if (transaction.type === SPEND_TYPE) {\n                    return \"\";\n                }\n                if (transaction.type === INCOME_TYPE) {\n                    return \"green\";\n                }\n                return \"\"\n            };\n\n            const getTransactionDestination = function () {\n                if (transaction.type === TRANSFER_TYPE) {\n                    return getNameFromNameId(transaction.toAccountNameId);\n                }\n\n                return getNameFromNameId(transaction.categoryNameId)\n            };\n\n            return (\n                <div className=\"row\" key={index}>\n                    <strong className=\"five  wide column\"\n                            style={{textAlign: 'left', verticalAlign: 'text-bottom'}}>\n                        {formatDate(transaction.date)}\n                    </strong>\n\n                    <div className=\"seven wide column\" style={{textAlign: 'left', color: getTransactionColor()}}>\n                        <label>{getNameFromNameId(transaction.accountNameId)}</label>\n                        <label> {getTransactionDirection()} </label>\n                        <label>{getTransactionDestination()}</label>\n                        <div>{transaction.description}</div>\n                    </div>\n\n                    <div className=\"four wide column \" style={{textAlign: 'right'}}>\n                        <label style={{padding: '20px'}}>{transaction.total}</label>\n                        <div className=\"mini ui button\" onClick={() => {\n                            setTransactionToEdit(transaction);\n                            setEditPopupActive(true)\n                        }}>/\n                        </div>\n                        <div className=\"mini ui button red\" onClick={() => {\n                            setTransactionToEdit(transaction);\n                            setDeletePopupActive(true)\n                        }}>X\n                        </div>\n                    </div>\n                </div>\n\n            );\n        })\n\n    };\n\n    function renderEditPopup() {\n        if (isEditPopupActive) {\n\n            return <EditTransactionPopup\n                isLoaded={true}\n                transactionToEdit={transactionToEdit}\n                onSaveClickedCallBack={(transactionData) => {\n                    editTransaction(transactionToEdit, transactionData);\n                    hideEditPopup();\n                }}\n                OnCancel={hideEditPopup}/>;\n        }\n    }\n\n\n    function renderDeletePopup() {\n        if (isDeletePopupActive) {\n\n            return <DeletePopup\n                itemName = \"transaction\"\n                OnDelete={() => {\n                    removeTransaction(transactionToEdit);\n                    hideDeletePopup();\n                }}\n                OnCancel={hideDeletePopup}/>;\n        }\n    }\n\n\n    function renderShowMoreButton() {\n        if (props.isHistoryTab || isAllTransactionsLoaded && itemsToShow >= transactions.length)\n            return;\n\n        return (\n            <button\n                className=\"ui button\"\n                onClick={showMoreClicked}>\n                Show more\n            </button>\n        );\n    }\n\n    const showMoreClicked = () => {\n\n        let newItemsToShowAmount = itemsToShow + 5;\n\n        setItemsToShow(newItemsToShowAmount);\n        console.log(\"itemsToShow \" + itemsToShow)\n\n        if (newItemsToShowAmount > transactions.length) {\n            loadMoreTransactions();\n        }\n\n    };\n\n    const renderDateSelection = () => {\n\n        if (props.isHistoryTab) {\n\n            return (\n                <DateSelector\n                    onSelectedDateChanged={fetchHistoryTransactions}/>\n            )\n        }\n    };\n\n\n    const hideEditPopup = () => setEditPopupActive(false);\n    const hideDeletePopup = () => setDeletePopupActive(false);\n\n    const dimmerStyle = `ui ${isLoaded ? '' : \"active\"} inverted dimmer`;\n    return (\n\n        <div className=\"ui segment\"\n             style={{border: '1px solid rgba(34,36,38,.15)'}}>\n            <div className={dimmerStyle}>\n                <div className=\"ui text loader\"/>\n            </div>\n            <h4 style={{textAlign: 'center'}}>History</h4>\n            {renderDateSelection()}\n            <div className=\"ui centered padded grid\">\n                {renderTransactions()}\n                {renderShowMoreButton()}\n            </div>\n\n            {renderEditPopup()}\n            {renderDeletePopup()}\n        </div>\n    )\n};\n\nexport default History;","import React, {useContext, useState} from 'react';\nimport History from \"./History\";\nimport InputDataForm from \"./InputDataForm\";\nimport ApiContext from \"../context/ApiContext\";\nimport {INCOME_TYPE, SPEND_TYPE, TRANSFER_TYPE} from \"../api/types\";\nimport BalanceBlock from \"./BalanceBlock\";\n\nconst AddTransaction = (props) => {\n\n    const {addTransaction, addTransferTransaction, addIncomeTransaction} = useContext(ApiContext);\n\n    const [isTransactionInProcess, setIsTransactionInProcess] = useState(false);\n    const [transactionStatusMessage, setTransactionStatusMessage] = useState('');\n\n    const onSaveClicked = async (transactionData, transactionType) => {\n        setIsTransactionInProcess(true);\n\n\n        let postResponse;\n\n        switch (transactionType) {\n            case SPEND_TYPE:\n                postResponse = await addTransaction(transactionData);\n                break;\n            case TRANSFER_TYPE:\n                postResponse = await addTransferTransaction(transactionData);\n                break;\n            case INCOME_TYPE:\n                postResponse = await addIncomeTransaction(transactionData);\n                break;\n        }\n\n\n        if (postResponse)\n            setTransactionStatusMessage(\"Transaction Saved\");\n        else\n            setTransactionStatusMessage(\"Failed to Save\");\n\n        setIsTransactionInProcess(false);\n    };\n\n\n    return (\n\n        <div className=\"ui container\"\n             style={{border: '1px solid rgba(34,36,38,.15)'}}>\n\n            <div className=\"ui centered grid\" style={{padding: '10px'}}>\n                <div className=\"four wide column\">\n                    <BalanceBlock/>\n                </div>\n                <InputDataForm isLoaded={props.isLoaded && !isTransactionInProcess}\n                               selectedCategoryNameId={props.selectedCategoryNameId}\n                               selectedAccountNameId={props.selectedAccountNameId}\n                               selectedIncomeCategoryNameId={props.selectedIncomeCategoryNameId}\n                               onAccountChanged={props.onAccountChanged}\n                               onSaveClickedCallBack={onSaveClicked}\n\n                />\n            </div>\n            <div style={{textAlign: 'center'}}>{transactionStatusMessage}</div>\n            <History itemsToShow={5}/>\n        </div>\n\n    )\n\n};\n\nexport default AddTransaction;","const port = 3002;\nconst url = 'https://my-json-server.typicode.com/YahorPadlucki/finn';\n\nexport const fetchData = async (dataUrl) => {\n    const response = await fetch(`${url}/${dataUrl}`)\n        .catch(() => false);\n    if (!response)\n        return false;\n    return await response.json();\n};\n\nexport const postTransaction = async (data) => {\n    return await postRequest(`${url}/transactions`, data);\n};\n\nexport const addNewName = async (data) => {\n    return await postRequest(`${url}/namesArray`, data);\n};\n\nexport const addNewAccount = async (data) => {\n    return await postRequest(`${url}/accounts`, data);\n};\n\nexport const addNewCategory = async (data) => {\n    return await postRequest(`${url}/categories`, data);\n};\n\nconst postRequest = (url, data) => {\n    return fetch(url, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n    })\n        .then(() => true)\n        .catch((e) => e);\n};\n\n\nexport const patchTransaction = async (data) => {\n    return await patchRequest(`${url}/transactions/${data.id}`, data);\n};\n\nexport const patchAccounts = async (data) => {\n    return await patchRequest(`${url}/accounts/${data.id}`, data);\n};\n\nexport const patchName = async (data) => {\n    return await patchRequest(`${url}/namesArray/${data.id}`, data);\n};\n\nexport const patchColor = async (data) => {\n    return await patchRequest(`${url}/categories/${data.id}`, data);\n};\n\nconst patchRequest = (url, data) => {\n    return fetch(url, {\n        method: 'PATCH',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n    })\n        .then(() => true)\n        .catch((e) => e);\n\n};\n\nexport const deleteTransaction = async (id) => {\n    return await deleteRequest(`${url}/transactions/${id}`);\n};\n\nexport const deleteAccount = async (id) => {\n    return await deleteRequest(`${url}/accounts/${id}`);\n};\n\nconst deleteRequest = (url) => {\n    return fetch(url, {\n        method: 'DELETE',\n    })\n        .then(() => true)\n        .catch((e) => e);\n};\n\n\n// export const patchName = async","import React, {useContext, useState} from 'react';\nimport Modal from \"../popup/Modal\";\nimport AppContext from \"../context/AppContext\";\nimport {CompactPicker} from 'react-color';\n\n\nconst EditFieldNamePopup = (props) => {\n\n    const {\n        getNameFromNameId\n    } = useContext(AppContext);\n    const [name, setName] = useState(props.fieldToEdit?getNameFromNameId(props.fieldToEdit.nameId):'');\n    const [color, setColor] = useState(props.color);\n\n    const formStateClassName = `ui form ${!props.isLoaded ? 'loading' : ''}`;\n\n\n\n    const renderContent = () => {\n        return (\n            <form className={formStateClassName} onSubmit={e => e.preventDefault()}>\n                <div className=\"field\">\n                    <input type=\"text\"\n                           value={name}\n                           onChange={e => setName(e.target.value)}\n                           onKeyPress={onKeyPress}\n                    />\n                </div>\n                {renderColorPicker()}\n                <div style={{textAlign: 'right'}}>\n                    <button className=\"big ui primary button \"\n                            onClick={onSaveClicked}>\n                        Save\n                    </button>\n                    <button className='big ui button'\n                            onClick={() => props.OnCancel()}>\n                        Cancel\n                    </button>\n                </div>\n            </form>\n\n\n        )\n    };\n\n    const renderColorPicker = function () {\n        if (color) {\n            return <div className=\"ui grid\">\n                <div className=\"row\">\n                    <div className=\"six wide column \">\n                        <label>Select Color</label>\n                        <CompactPicker\n                            color={color}\n                            onChangeComplete={handleChangeComplete}/>\n                    </div>\n                </div>\n            </div>;\n        }\n        return <div/>;\n\n    };\n\n    const handleChangeComplete = (color) => {\n        setColor(color.hex);\n    };\n\n    const onSaveClicked = async () => {\n        // if (isErrorInInputField() || isInputFieldDisabled()) {\n        //     setIsInputValid(false);\n        // } else {\n        //     if (!isInputValid)\n        //         setIsInputValid(true);\n        //\n\n        const data = {nameId: props.fieldToEdit.nameId}\n\n        if (getNameFromNameId(props.fieldToEdit.nameId) !== name) {\n            data.name = name;\n        }\n        if (color !== props.color) {\n            console.log(\"=== old color \" + props.color)\n            console.log(\"=== saving color \" + color)\n            data.color = color;\n        }\n\n        if (data.color || data.name)\n            props.onSaveClickedCallBack(data);\n\n\n        // clearFields();\n        // const postResponse = await postTransaction();\n    };\n\n\n    const onKeyPress = (e) => {\n        if (e.key === 'Enter') {\n            onSaveClicked();\n        }\n\n    };\n\n    return (\n        <Modal\n            title={props.title}\n            content={renderContent()}\n            onDismiss={() => props.OnCancel()}\n        />\n    );\n\n};\n\nexport default EditFieldNamePopup;\n","import React, {useContext, useState} from 'react';\nimport AppContext from \"../context/AppContext\";\nimport EditFieldNamePopup from \"./EditFieldNamePopup\";\nimport DeletePopup from \"./DeletePopup\";\nimport ApiContext from \"../context/ApiContext\";\n\n\nconst Settings = () => {\n    const EDIT = \"edit\";\n    const ADD_ACCOUNT = \"addAccount\";\n    const ADD_CATEGORY = \"addCategory\";\n\n    const {\n        isLoaded,\n        accounts,\n        categories,\n        edit,\n        getNameFromNameId,\n        addAccount,\n        addCategory\n    } = useContext(AppContext);\n    const {removeAccount} = useContext(ApiContext);\n    const [isEditPopupActive, setEditPopupActive] = useState(false);\n    const [isDeletePopupActive, setDeletePopupActive] = useState(false);\n\n    const [popupType, setPopupType] = useState(EDIT);\n\n    const [fieldToEdit, setFieldToEdit] = useState('');\n    const [namePopupTitle, setNamePopupTitle] = useState('');\n    const [fieldToEditTypeName, setFieldToEditTypeName] = useState('');\n\n\n    const hideEditPopup = () => setEditPopupActive(false);\n    const hideDeletePopup = () => setDeletePopupActive(false);\n\n\n    const dimmerStyle = `ui ${isLoaded ? '' : \"active\"} inverted dimmer`;\n\n\n    function setColorForEditPopup(fieldToEdit, popupType) {\n        if (fieldToEdit.color) return fieldToEdit.color;\n        if (popupType === ADD_CATEGORY) return \"#ffffff\"\n    }\n\n    function renderEditPopup() {\n        if (isEditPopupActive) {\n            return <EditFieldNamePopup\n                isLoaded={isLoaded}\n                title={namePopupTitle}\n                fieldToEdit={fieldToEdit}\n                color={setColorForEditPopup(fieldToEdit, popupType)}\n                // transactionToEdit={transactionToEdit}\n                onSaveClickedCallBack={(data) => {\n\n                    switch (popupType) {\n                        case EDIT:\n                            edit(data);\n                            break;\n                        case ADD_ACCOUNT:\n                            addAccount(data.name);\n                            break;\n                        case ADD_CATEGORY:\n                            addCategory(data.name,data.color);\n                            break;\n                    }\n\n                    hideEditPopup();\n                }}\n                OnCancel={hideEditPopup}/>;\n        }\n    }\n\n\n    function renderDeletePopup() {\n        if (isDeletePopupActive) {\n\n            return <DeletePopup\n                itemName={fieldToEditTypeName}\n                OnDelete={() => {\n                    // removeTransaction(transactionToEdit);\n                    hideDeletePopup();\n                }}\n                OnCancel={hideDeletePopup}/>;\n\n\n        }\n    }\n\n\n    function renderElements(elemets, typeName, deleteFunction) {\n        return elemets.map((el,i) => {\n            return (\n                <div className=\"item\" key={i}>\n                    <div>{getNameFromNameId(el.nameId)}\n                        <div className=\"mini ui button right floated\" onClick={() => {\n                            setFieldToEdit(el);\n                            setNamePopupTitle(\"Edit name\");\n                            setEditPopupActive(true);\n                            setPopupType(EDIT);\n                        }}>/\n                        </div>\n                        {/*<div className=\"mini ui button red right floated\" onClick={() => {*/}\n                        {/*setFieldToEdit(el);*/}\n                        {/*setDeletePopupActive(true)*/}\n                        {/*setFieldToEditTypeName(typeName)*/}\n                        {/*deleteFunction(el.id);*/}\n                        {/*}}>X*/}\n                        {/*</div>*/}\n                    </div>\n                </div>\n            );\n        });\n\n\n    }\n\n    return (\n        <div className=\"ui segment\"\n             style={{border: '1px solid rgba(34,36,38,.15)'}}>\n            <div className={dimmerStyle}>\n                <div className=\"ui text loader\"/>\n            </div>\n            <h4 style={{textAlign: 'center'}}>Settings</h4>\n\n            <h3>Accounts\n                <div className=\"mini ui button blue right floated\" onClick={() => {\n                    setNamePopupTitle(\"Add new Account\");\n                    setFieldToEdit('');\n                    setEditPopupActive(true);\n                    setPopupType(ADD_ACCOUNT);\n                }}>+</div>\n            </h3>\n            <div className=\"ui middle aligned divided list\">\n                {renderElements(accounts, \"account\", removeAccount)}\n            </div>\n\n\n            <h3>Categories\n                <div className=\"mini ui button blue right floated\" onClick={() => {\n                    setNamePopupTitle(\"Add new Category\");\n                    setFieldToEdit('');\n                    setEditPopupActive(true);\n                    setPopupType(ADD_CATEGORY);\n                }}>+</div>\n\n            </h3>\n            <div className=\"ui middle aligned divided list\">\n                {renderElements(categories, \"category\")}\n            </div>\n\n\n            {renderEditPopup()}\n            {renderDeletePopup()}\n        </div>\n    )\n};\n\nexport default Settings;","import React, {useEffect, useState} from 'react';\nimport BalanceHeader from \"./BalanceHeader\";\nimport Expenses from \"./infoBlocks/Expenses\";\nimport NavigationBar from \"./NavigationBar\";\nimport Balance from \"./infoBlocks/Balance\";\nimport History from \"./infoBlocks/History\";\nimport AddTransaction from \"./infoBlocks/AddTransaction\";\nimport {\n    ACCOUNTS,\n    CATEGORIES,\n    INCOME_CATEGORIES,\n    INCOME_TYPE, NAMES,\n    SPEND_TYPE,\n    TRANSACTIONS,\n    TRANSFER_TYPE\n} from \"./api/types\";\nimport {\n    addNewAccount, addNewCategory,\n    addNewName,\n    deleteAccount,\n    deleteTransaction,\n    fetchData,\n    patchAccounts, patchColor,\n    patchName,\n    patchTransaction,\n    postTransaction\n} from \"./api/serverApi\";\nimport AppContext from \"./context/AppContext\"\nimport ApiContext from \"./context/ApiContext\"\nimport './popup/Modal.css'\nimport Settings from \"./infoBlocks/Settings\";\n\nconst App = () => {\n\n    const [accounts, setAccounts] = useState([]);\n    const [names, setNames] = useState([]);\n    const [categories, setCategories] = useState([]);\n    const [incomeCategories, setIncomeCategories] = useState([]);\n    const [latestTransactions, setLatestTransactions] = useState([]);\n    const [historyTransactions, setHistoryTransactions] = useState([]);\n\n    const [selectedAccount, setSelectedAccount] = useState('');\n    const [selectedCategoryNameId, setSelectedCategoryNameId] = useState('');\n    const [selectedIncomeCategoryNameId, setSelectedIncomeCategoryNameId] = useState('');\n\n    const [selectedInfoBlock, setSelectedInfoBlock] = useState(2);\n    const [isLoaded, setIsLoaded] = useState(false);\n\n    const [loadTransactionsLimit, setLoadTransactionsLimit] = useState(10);\n    const [isAllTransactionsLoaded, setIsAllTransactionsLoaded] = useState(false);\n\n\n    const onTabButtonClicked = (selectedButtonIndex) => {\n        setSelectedInfoBlock(selectedButtonIndex);\n        console.log(selectedButtonIndex)\n    };\n\n\n    useEffect(() => {\n        // component did mount\n        console.log(\"did mount\")\n        fetchInitData();\n\n    }, []);\n\n    useEffect(() => {\n        // component did mount\n        console.log(\"loadTransactionsLimit changed\")\n        fetchLatestTransactions();\n\n    }, [loadTransactionsLimit]);\n\n\n    async function fetchInitData() {\n        await fetchNames();\n        await fetchAccounts();\n        await fetchCategories();\n\n        console.log('=== fetch init data')\n\n\n        const incomeCategories = await fetchData(INCOME_CATEGORIES);\n        if (incomeCategories) {\n            setIncomeCategories(incomeCategories);\n            setSelectedIncomeCategoryNameId(incomeCategories[0].nameId);\n            console.log(\"init income \" + incomeCategories[0].nameId)\n        }\n\n\n        await fetchLatestTransactions();\n        setIsLoaded(true);\n    }\n\n    const fetchNames = async function () {\n        const names = await fetchData(NAMES);\n        setNames(names);\n    };\n\n    const fetchAccounts = async function () {\n        const accounts = await fetchData(ACCOUNTS);\n        if (accounts) {\n            setAccounts(accounts);\n            setSelectedAccount(accounts[0]);\n        }\n    };\n\n    const fetchCategories = async function () {\n        const categories = await fetchData(CATEGORIES);\n        if (categories) {\n            setCategories(categories);\n            setSelectedCategoryNameId(categories[0].nameId);\n        }\n    };\n\n    const getNameFromNameId = (id) => {\n        if (id)\n            return names.filter(el => el.nameId === id)[0].name;\n\n    };\n\n    const fetchLatestTransactions = async () => {\n\n        const newTransactions = await fetchData(TRANSACTIONS + `?_sort=id&_order=desc&_page=1&_limit=${loadTransactionsLimit}`);\n        if (newTransactions) {\n\n            setIsAllTransactionsLoaded((newTransactions.length === latestTransactions.length) || (newTransactions.length < loadTransactionsLimit));\n            //TODO case with first load\n            setLatestTransactions(newTransactions);\n        } else {\n            await fetchLatestTransactions();\n        }\n\n    };\n\n    const fetchHistoryTransactions = async (month, year) => {\n\n        console.log(\"fetch history \" + month)\n        console.log(\"fetch history \" + year)\n        const newTransactions = await fetchData(TRANSACTIONS + `?_sort=id&_order=desc&year=${year}&month=${month}`);\n        if (newTransactions) {\n            setHistoryTransactions(newTransactions);\n        } else {\n            await fetchHistoryTransactions();\n        }\n\n    };\n\n\n    const loadMoreTransactions = () => {\n\n        setLoadTransactionsLimit(loadTransactionsLimit + 10);\n\n    };\n\n\n    const onAccountChanged = (selectedAccountNameId) => {\n        setSelectedAccount(accounts.find(el => el.nameId === selectedAccountNameId));\n    };\n\n    const renderInfoBlock = () => {\n\n        switch (selectedInfoBlock) {\n            case 0:\n                return <Balance/>;\n            case 1:\n                return <Expenses/>;\n            case 2:\n                //TODO: selected income category (props and use effect?)\n                return <AddTransaction\n                    selectedAccountNameId={selectedAccount.nameId}\n                    selectedCategoryNameId={selectedCategoryNameId}\n                    onAccountChanged={onAccountChanged}\n                    selectedIncomeCategoryNameId={selectedIncomeCategoryNameId}\n                    isLoaded={isLoaded}\n                />;\n            case 3:\n                return <History itemsToShow={10}\n                                isHistoryTab={true}/>;\n            case 4:\n                return <Settings/>\n            default:\n                return null;\n        }\n\n    };\n\n    const addTransaction = async (transactionData) => {\n        setIsLoaded(false);\n\n        const postResponse = await postTransaction(transactionData);\n        selectedAccount.balance -= transactionData.total;\n\n        await patchAccounts(selectedAccount);\n        await fetchLatestTransactions();\n        setIsLoaded(true);\n        return postResponse;\n\n\n    };\n\n    const addIncomeTransaction = async (transactionData) => {\n        setIsLoaded(false);\n\n        const postResponse = await postTransaction(transactionData);\n        selectedAccount.balance += transactionData.total;\n\n        await patchAccounts(selectedAccount);\n        await fetchLatestTransactions();\n        setIsLoaded(true);\n        return postResponse;\n\n\n    };\n\n    const addTransferTransaction = async (transactionData) => {\n        setIsLoaded(false);\n\n        const postResponse = await postTransaction(transactionData);\n\n        const fromAcc = accounts.filter(acc => acc.nameId === transactionData.accountNameId)[0];\n        const toAcc = accounts.filter(acc => acc.nameId === transactionData.toAccountNameId)[0];\n\n        toAcc.balance += transactionData.total;\n        fromAcc.balance -= transactionData.total;\n\n\n        await patchAccounts(toAcc);\n        await patchAccounts(fromAcc);\n        await fetchLatestTransactions();\n        setIsLoaded(true);\n        return postResponse;\n\n\n    };\n\n\n    const editTransaction = async (oldData, newData) => {\n        if (oldData.type === TRANSFER_TYPE) {\n            await editTransferTransaction(oldData, newData);\n            return;\n        }\n\n        let sign = 1;\n        if (oldData.type === INCOME_TYPE) {\n            sign = -1;\n        }\n\n        if (oldData.accountNameId === newData.accountNameId) {\n            const deltaAmount = oldData.total - newData.total;\n            const acc = accounts.filter(acc => acc.nameId === oldData.accountNameId)[0];\n            acc.balance += deltaAmount * sign;\n            await patchAccounts(acc);\n\n        } else {\n\n            const oldAcc = accounts.filter(acc => acc.nameId === oldData.accountNameId)[0];\n            const newAcc = accounts.filter(acc => acc.nameId === newData.accountNameId)[0];\n\n            if (newData.total === oldData.total) {\n                oldAcc.balance += newData.total * sign;\n                newAcc.balance -= newData.total * sign;\n            } else {\n\n                oldAcc.balance += oldData.total * sign;\n                newAcc.balance -= newData.total * sign;\n            }\n\n\n            await patchAccounts(oldAcc);\n            await patchAccounts(newAcc);\n        }\n\n        await patchTransaction(newData);\n        await fetchLatestTransactions();\n        await fetchHistoryTransactions(oldData.year, oldData.month);\n    };\n\n    const editTransferTransaction = async (oldData, newData) => {\n\n        const oldFromAcc = accounts.filter(acc => acc.nameId === oldData.accountNameId)[0];\n        const oldToAcc = accounts.filter(acc => acc.nameId === oldData.toAccountNameId)[0];\n\n        const newFromAcc = accounts.filter(acc => acc.nameId === newData.accountNameId)[0];\n        const newToAcc = accounts.filter(acc => acc.nameId === newData.toAccountNameId)[0];\n\n        /*  await removeTransaction(oldData);\n          await addTransferTransaction(newData);\n\n\n\n          await fetchLatestTransactions();\n          await fetchHistoryTransactions(oldData.year, oldData.month);\n\n          const accounts = await fetchData(ACCOUNTS);\n          if (accounts)\n              setAccounts(accounts);\n  */\n        //todo rafactor\n        // can use such method?\n\n        if (newData.total === oldData.total) {\n            if (oldFromAcc === newFromAcc) {\n                // case when only TO acc changed\n                if (oldToAcc !== newToAcc) {\n                    oldToAcc.balance -= oldData.total;\n                    newToAcc.balance += newData.total;\n                } else {\n\n                }\n\n            } else {\n                //case when only FROM account changed\n                if (oldToAcc === newToAcc) {\n                    oldFromAcc.balance += oldData.total;\n                    newFromAcc.balance -= newData.total;\n                } else {\n                    oldFromAcc.balance += oldData.total;\n                    oldToAcc.balance -= oldData.total;\n\n                    newFromAcc.balance -= newData.total;\n                    newToAcc.balance += newData.total;\n                }\n\n            }\n        } else {\n            const deltaAmount = oldData.total - newData.total;\n\n            if (oldFromAcc === newFromAcc) {\n                oldFromAcc.balance += deltaAmount;\n\n                if (oldToAcc === newToAcc) {\n                    oldToAcc.balance -= deltaAmount;\n                } else {\n                    newToAcc.balance += newData.total;\n                    oldToAcc.balance -= oldData.total;\n                }\n\n            } else {\n\n                if (oldToAcc === newToAcc) {\n                    newFromAcc.balance -= newData.total;\n                    oldFromAcc.balance += oldData.total;\n\n                    oldToAcc.balance -= deltaAmount;\n                } else {\n\n                    oldFromAcc.balance += oldData.total;\n                    oldToAcc.balance -= oldData.total;\n\n                    newFromAcc.balance -= newData.total;\n                    newToAcc.balance += newData.total;\n                }\n\n            }\n\n\n        }\n\n        await patchAccounts(oldFromAcc);\n        await patchAccounts(newFromAcc);\n        await patchAccounts(oldToAcc);\n        await patchAccounts(newToAcc);\n\n        await patchTransaction(oldData);\n        await patchTransaction(newData);\n\n        await fetchLatestTransactions();\n        await fetchHistoryTransactions(oldData.year, oldData.month);\n    };\n\n    const removeTransaction = async (transaction) => {\n        setIsLoaded(false);\n\n        await deleteTransaction(transaction.id);\n\n        const acc = accounts.filter(acc => acc.nameId === transaction.accountNameId)[0];\n\n        if (transaction.type === SPEND_TYPE)\n            acc.balance += transaction.total;\n        if (transaction.type === INCOME_TYPE)\n            acc.balance -= transaction.total;\n\n        if (transaction.type === TRANSFER_TYPE) {\n            acc.balance += transaction.total;\n            const toAcc = accounts.filter(acc => acc.nameId === transaction.toAccountNameId)[0];\n            toAcc.balance -= transaction.total;\n            await patchAccounts(toAcc);\n        }\n\n\n        await patchAccounts(acc);\n\n        await fetchInitData();\n\n        //TODO: not very accurate\n        await fetchHistoryTransactions(transaction.year, transaction.month);\n        setIsLoaded(true);\n\n    };\n\n    const removeAccount = async (accountId) => {\n        setIsLoaded(false);\n        await deleteAccount(accountId);\n\n        await fetchInitData();\n        setIsLoaded(true);\n\n    };\n\n    const addAccount = async (accountName) => {\n\n        const newNameId = await saveNewName(accountName);\n\n        setIsLoaded(false);\n        await fetchNames();\n\n        const newAccData = {\n            nameId: newNameId,\n            balance: 0\n        };\n\n        await addNewAccount(newAccData);\n        await fetchAccounts();\n        setIsLoaded(true);\n\n    };\n\n    const addCategory = async (categoryName, color) => {\n\n        const newNameId = await saveNewName(categoryName);\n        setIsLoaded(false);\n\n        await fetchNames();\n\n        const newCategoryData = {\n            nameId: newNameId,\n            color: color\n        };\n\n        await addNewCategory(newCategoryData);\n        await fetchCategories();\n        setIsLoaded(true);\n\n    };\n\n    const saveNewName = async function (newName) {\n        const newNameId = names.sort((a, b) => (a.nameId > b.nameId) ? 1 : ((b.nameId > a.nameId) ? -1 : 0))[names.length - 1].nameId + 1;\n        const newNameData = {\n            name: newName,\n            nameId: newNameId\n        };\n\n        await addNewName(newNameData);\n        return newNameId;\n    };\n\n    const edit = async (data) => {\n        setIsLoaded(false);\n\n        if (data.name) {\n            const id = names.filter(name => name.nameId === data.nameId)[0].id;\n            console.log(\"pathc id \" + id)\n            console.log(\"pathc name \" + data.name)\n            console.log(\"pathc name id \" + data.nameId)\n\n            await patchName({id: id, name: data.name, nameId: data.nameId});\n            const updatedNames = await fetchData(NAMES);\n            setNames(updatedNames);\n        }\n        if (data.color) {\n            console.log(categories)\n            const id = categories.filter(category => category.nameId === data.nameId)[0].id;\n            console.log(\"pathc \" + data.color)\n            console.log(\"data.nameId \" + data.nameId)\n\n\n            await patchColor({id: id, color: data.color})\n\n            setCategories(await fetchData(CATEGORIES));\n\n        }\n\n        setIsLoaded(true);\n    };\n\n\n    return (\n        <ApiContext.Provider value={{\n            editTransaction: editTransaction,\n            removeTransaction: removeTransaction,\n            addTransaction: addTransaction,\n            addIncomeTransaction: addIncomeTransaction,\n            addTransferTransaction: addTransferTransaction,\n            removeAccount: removeAccount\n        }}>\n            <AppContext.Provider value={{\n                accounts,\n                latestTransactions,\n                historyTransactions,\n                categories,\n                incomeCategories,\n                isLoaded,\n                isAllTransactionsLoaded,\n                loadMoreTransactions: loadMoreTransactions,\n                fetchHistoryTransactions: fetchHistoryTransactions,\n                getNameFromNameId: getNameFromNameId,\n                edit: edit,\n                addAccount: addAccount,\n                addCategory: addCategory\n\n            }}>\n                <div className=\"ui container\"\n                     style={{marginTop: '10px'}}>\n                    <NavigationBar\n                        selectedButtonIndex={selectedInfoBlock}\n                        onButtonClicked={onTabButtonClicked}/>\n                    <BalanceHeader accountName={getNameFromNameId(selectedAccount.nameId)}\n                                   balance={selectedAccount.balance}/>\n                    {renderInfoBlock()}\n\n                </div>\n            </AppContext.Provider>\n        </ApiContext.Provider>\n    );\n\n};\n\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n\n"],"sourceRoot":""}